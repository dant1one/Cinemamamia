from flask import Flask, request, jsonify
import datetime

app = Flask(__name__)

users_db = {
    "admin": "admin",
    "daniyal": "123",
}

titles = {}

logged_in_users = {}

user_reservations = {}

@app.route('/login')
def login():
    username = request.args.get('username')
    password = request.args.get('password')
    if username in users_db and users_db[username] == password:
        logged_in_users[username] = {"logged_in": True}
        print(f"User {username} logged in successfully.")
        return 'Success', 200
    else:
        print(f"Failed login attempt for {username}.")
        return 'Invalid username or password', 401

@app.route('/logout')
def logout():
    username = request.args.get('username')
    if username in logged_in_users:
        logged_in_users.pop(username)
        return 'Logged out', 200
    return 'User not logged in', 401

@app.route('/register')
def register():
    username = request.args.get('username')
    password = request.args.get('password')

    if not username or not password:
        return "Missing username or password", 400

    if username in users_db:
        return "Username already exists", 409

    users_db[username] = password
    print(f"User {username} registered successfully.")
    return "Registration successful", 200

@app.route('/add_movie')
def add_movie():
    title = request.args.get('title')
    hall = request.args.get('hall')
    price = request.args.get('price')
    date = request.args.get('date')
    time = request.args.get('time')

    if not title or not hall or not price or not date or not time:
        return "Missing required fields", 400

    if title not in titles:
        titles[title] = []

    session = {
        "time": time,
        "date": date,
        "hall": hall,
        "price": price,
        "seats": {f"{chr(65 + row)}{col}": {"reserved": False, "reserved_by": None} for row in range(5) for col in range(1, 8)}
    }

    titles[title].append(session)
    return "Movie session added successfully", 200

@app.route('/get_onlymovies')
def get_onlymovies():
    movie_titles = list(titles.keys())
    return jsonify(movie_titles), 200

@app.route('/get_movie_info')
def get_movie_info():
    title = request.args.get('title')

    if title in titles:
        movie_info = {
            title: titles[title]
        }
        return jsonify(movie_info), 200

    return "Movie not found", 404

@app.route('/get_session_seats')
def get_session_seats():
    title = request.args.get('title')
    date = request.args.get('date')
    time = request.args.get('time')

    if title in titles:
        for session in titles[title]:
            if session['date'] == date and session['time'] == time:
                return jsonify(session['seats']), 200
    return jsonify({"error": "Session not found"}), 404


@app.route('/reserve_seat/<username>/<title>/<date>/<time>/<seats>')
def reserve_seat(username, title, date, time, seats):
    if username not in logged_in_users:
        print(f"User {username} not logged in.")
        return jsonify({"error": "User not logged in"}), 401

    if title not in titles:
        print(f"Movie {title} not found.")
        return jsonify({"error": "Movie not found"}), 404

    seats_list = seats.split(',')
    reserved_seats = []

    for session in titles[title]:
        if session['date'] == date and session['time'] == time:
            for seat in seats_list:
                if seat not in session['seats']:
                    print(f"Invalid seat: {seat}")
                    return jsonify({"error": f"Invalid seat: {seat}"}), 400

                if session['seats'][seat]["reserved"]:
                    print(f"Seat {seat} already reserved.")
                    return jsonify({"error": f"Seat {seat} already reserved"}), 409

                session['seats'][seat] = {"reserved": True, "reserved_by": username}
                reserved_seats.append(seat)

            if username not in user_reservations:
                user_reservations[username] = []

            reservation_info = {
                "title": title,
                "hall": session['hall'],
                "date": date,
                "time": time,
                "seats": reserved_seats
            }

            user_reservations[username].append(reservation_info)
            print(f"Seats reserved successfully: {reserved_seats}")
            return jsonify({
                "message": "Seats reserved successfully",
                "reservation_info": reservation_info
            }), 200

    print("Session not found for specified date/time.")
    return jsonify({"error": "Session not found"}), 404

@app.route('/get_movie_profit')
def get_movie_profit():
    title = request.args.get('title')

    if title not in titles:
        return jsonify({"error": "Movie not found"}), 404

    total_profit = 0
    total_booked_seats = 0
    passed_sessions_count = 0
    current_time = datetime.datetime.now()

    for session in titles[title]:
        session_datetime = datetime.datetime.strptime(f"{session['date']} {session['time']}", "%Y-%m-%d %H:%M")

        if session_datetime < current_time:
            passed_sessions_count += 1

        for seat, reservation in session['seats'].items():
            if reservation['reserved']:
                total_booked_seats += 1
                total_profit += float(session['price'])

    return jsonify({
        "total_profit": total_profit,
        "passed_sessions_count": passed_sessions_count,
        "total_booked_seats": total_booked_seats
    }), 200


@app.route('/get_user_reservations')
def get_user_reservations():
    username = request.args.get('username')
    if username in user_reservations:
        return jsonify(user_reservations[username]), 200
    return jsonify({"error": "No reservations found"}), 404

@app.route('/get_user_history')
def get_user_history():
    username = request.args.get('username')
    if username in user_reservations:
        history = []
        for reservation in user_reservations[username]:
            history.append({
                "movie_title": reservation["title"],
                "date": reservation["date"],
                "time": reservation["time"],
                "hall": reservation["hall"],
                "seats": reservation["seats"]
            })
        return jsonify(history), 200

    return jsonify({"error": "No history found"}), 404

@app.route('/check_hall_availability')
def check_hall_availability():
    hall = request.args.get('hall')
    date = request.args.get('date')
    time = request.args.get('time')

    for title, sessions in titles.items():
        for session in sessions:
            if session['hall'] == hall and session['date'] == date and session['time'] == time:
                return jsonify({"error": "Hall is already booked for this time and date."}), 409
    
    return jsonify({"message": "Hall is available."}), 200

if __name__ == "__main__":
    app.run(debug=True)